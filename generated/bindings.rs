/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PointC {
    pub x: i64,
    pub y: i64,
}
#[test]
fn bindgen_test_layout_PointC() {
    const UNINIT: ::std::mem::MaybeUninit<PointC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PointC>(),
        16usize,
        concat!("Size of: ", stringify!(PointC))
    );
    assert_eq!(
        ::std::mem::align_of::<PointC>(),
        8usize,
        concat!("Alignment of ", stringify!(PointC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(PointC), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(PointC), "::", stringify!(y))
    );
}
pub const FillRuleC_EvenOdd: FillRuleC = 0;
pub const FillRuleC_NonZero: FillRuleC = 1;
pub const FillRuleC_Positive: FillRuleC = 2;
pub const FillRuleC_Negative: FillRuleC = 3;
pub type FillRuleC = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathsC {
    _unused: [u8; 0],
}
extern "C" {
    pub fn union_c(
        points: *const PointC,
        num_paths: usize,
        path_sizes: *const usize,
        fillrule: FillRuleC,
    ) -> *mut PathsC;
}
extern "C" {
    pub fn free_paths_c(paths: *mut PathsC);
}
